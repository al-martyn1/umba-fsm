Заметки на тему генератора FSM

Далека дорога твоя,
Далека, дика и пустынна.
Эта даль и глушь
Не для слабых душ.
Далека дорога твоя.
Эта даль и глушь
Не для слабых душ.
Далека дорога твоя.


enter-action, on-enter, exit-action, on-exit, loop-action, on-loop

события могут быть параметризованными одним параметром. События надо описать

Сначала описываем типы данных: using token_type = umba::tokenizer::token_type

атрибуты: native=true - говорит, что надо использовать константы для сравнения вида umba::tokenizer::SomeVal, когда встречается SomeVal, иначе - UMBA_TOKENIZER_SOME_VAL - это при конечной генерации

атрибут - name-style - с каким стилем генерить имя

события. event tokenEvent [payload=token_type, display-as="ВхТокен"]

payload - зарезервированное слово

состояния. state Start [display-as="Начало" on-enter=doEnter...], будет вызываться Start_doEnter()

Когда входим в режим чтения атрибутов, символ '-' (минус) перестаёт быть операторным, и становится идентификаторным


Пример:



fsm FSM_NAME





Попробуем сделать разбор через цепочки, которые будем хранить в trie.

Отличие от токенизера/лексера - там у нас в token-ключе лежали символы, а в payload - токены для лексем.
Тут у нас в token-ключе будут лежить уже токены, а в payload - доп инфа.

Задаём цепочки разбора.

Но их задавать ручками неудобно.

Попробуем через BNF (TBNF - tokenizer BNF)

Коментарий - символ '#', можно использовать в любой позиции в строке. Сишечный "//" тоже?
Коментарий многострок - "/*" / "*/"

"Мощность" выражений, квантификаторы "мощность" (https://en.cppreference.com/w/cpp/regex/ecmascript)
* - от нуля повторений до бесконечности
+ - от одного повторения до бесконечности
? - ноль или одно
{ N } - точно N раз
{ , M } - от нуля повторений до M
{ N , } - от N повторений до бесконечности
{ N , M } - от N повторений до M повторений
{,} - от нуля повторений до бесконечности - эквивалентно *
Скобки (parenthesis) - задают последовательность или альтернативу, к которой может быть применён квантификатор мощности
Квадратные скобки ([...]) - экваивалентно "?(...)"


Замечание. BUILTIN - обозначить каким-то знаком маркером?
Есть '@' и '$', что взять? Пусть будет собака '@'


Базовые конструкции задают цепочки на базе токенизатора

@ integral | integral-number
@ float | float-number
DEFAULT_INTEGRAL_NUMBER: BUILTIN_INTEGRAL_NUMBER base 10
EXPLICIT_DEC_INTEGRAL_NUMBER: BUILTIN_INTEGRAL_NUMBER base 10 prefix "0d"i
EXPLICIT_BIN_INTEGRAL_NUMBER: BUILTIN_INTEGRAL_NUMBER base2  prefix "0b"i
EXPLICIT_OCT_INTEGRAL_NUMBER: BUILTIN_INTEGRAL_NUMBER base 8  prefix "0"
EXPLICIT_HEX_INTEGRAL_NUMBER: BUILTIN_INTEGRAL_NUMBER base 16 prefix "0x"i

DEFAULT_FLOAT_NUMBER: BUILTIN_FLOAT_NUMBER base 10
EXPLICIT_DEC_FLOAT_NUMBER: BUILTIN_INTEGRAL_NUMBER base 10 prefix "0d"i
EXPLICIT_BIN_FLOAT_NUMBER: BUILTIN_INTEGRAL_NUMBER base 2  prefix "0b"i
EXPLICIT_OCT_FLOAT_NUMBER: BUILTIN_INTEGRAL_NUMBER base 8  prefix "0"
EXPLICIT_HEX_FLOAT_NUMBER: BUILTIN_INTEGRAL_NUMBER base 16 prefix "0x"i

FLOAT_NUMBER : DEFAULT_FLOAT_NUMBER | EXPLICIT_DEC_FLOAT_NUMBER | EXPLICIT_BIN_FLOAT_NUMBER | EXPLICIT_OCT_FLOAT_NUMBER | EXPLICIT_HEX_FLOAT_NUMBER

INTEGRAL_NUMBER : DEFAULT_INTEGRAL_NUMBER | EXPLICIT_DEC_INTEGRAL_NUMBER | EXPLICIT_BIN_INTEGRAL_NUMBER | EXPLICIT_OCT_INTEGRAL_NUMBER | EXPLICIT_HEX_INTEGRAL_NUMBER


# Тут как быть? В парсере/генераторе "BNF" мы можем зашить только те константы, которые у нас уже есть
# Если именованных констант нет готовых, пользователь задаёт своё число. И как н потом в коде пишет? Тоже числом? Или у него есть своя именованная константа? А он не проебётся менявши значение и там и тут?
# Или задаём token-id, и если числовой, то ещё должно быть имя константы, и тогда мы можем нагенерить define'ов
# Если token-id не задан, то значение будет присвоено автоматически

@ operator
MUL_OP: BUILTIN_OPERATOR "*" token-id UMBA_TOKENIZER_TOKEN_OPERATOR_MULTIPLICATION
MUL_OP: BUILTIN_OPERATOR "*" token-id 0x2345 name OPERATOR_MULTIPLICATION

EXPRESSION_SEPARATOR: BUILTIN_OPERATOR ";" token-id 0x2345 name OPERATOR_MULTIPLICATION

При генерации, когда мы генерим define'ы, к ним добавляется глобальный префикс, задаваемый опцией командной строки


@ literal | string-literal
STRING_LITERAL            : BUILTIN_STRING_LITERAL kind cpp prefix "\"";
CHAR_LITERAL              : BUILTIN_STRING_LITERAL kind cpp prefix "\'";
INCLUDE_SYS_NAME_LITERAL  : BUILTIN_STRING_LITERAL kind simple prefix "<";


# Любой идентификатор
@ identifier
IDENTIFIER: BUILTIN_IDENTIFIER

# KEYWORD_IMPORT - попадёт в список констант для генерации, значение будет присвоено автоматически
KEYWORD_IMPORT : BUILTIN_IDENTIFIER value "import"i
KEYWORD_FROM   : BUILTIN_IDENTIFIER value "from"i
KEYWORD_AS     : BUILTIN_IDENTIFIER value "as"i
KEYWORD_FSM    : BUILTIN_IDENTIFIER value "fsm"i

# скобки. Тут хз как лучше, пока так. Символов должно быть ровно два
PARENTHESIS_OPEN  : BUILTIN_BRACKETS first "()"
PARENTHESIS_CLOSE : BUILTIN_BRACKETS second "()"

# или

# Символ должен быть один
PARENTHESIS_OPEN   : BUILTIN_BRACKETS open "("
PARENTHESIS_CLOSE  : BUILTIN_BRACKETS close ")"
# Тут будет сгенерирована пара идентификаторов: PARENTHESIS_OPEN/PARENTHESIS_CLOSE
PARENTHESIS       : BUILTIN_BRACKETS open "(" close ")"

# Задаётся один раз. Не используется при генерации парсера, передаётся токенизеру, и коментарии просто отбрасываются
SINGLELINE_COMMENT: BUILTIN_COMMENT prefix "//" position beginning any
# Может быть задано неоднократно. Не используется при генерации парсера, передаётся токенизеру, и коментарии просто отбрасываются
MULTILINE_COMMENT : BUILTIN_COMMENT prefix "/*" suffix "*/"

Питоновское
import <module_name>[, <module_name> ...]
from <module_name> import <name(s)>

Или как?
import from <file.fsm> - импортирует всё, обращаемся ко всем автоматам через имя file:FSM_NAME
import FSM_NAME from <file.fsm> - импортирует FSM_NAME, обращаемся как к FSM_NAME
import FSM_NAME from <file.fsm> as FSM_ALIAS - импортирует FSM_NAME, обращаемся как к FSM_ALIAS



